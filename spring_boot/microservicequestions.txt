1. How do you handle distributed transactions in in your architecture- Microservices or Service based architecture?
    Ans — Distributed transactions are the transactions that can span across multiple services. These type of transactions might introduce complexity
    and tight coupling amongst the services. One way is to avoid these transactions and keep those as set of local transactions for each service.
    SAGA pattern can be used here to handle it cleanly — There are two ways to use it -Choreography-based saga, Orchestration-based saga.

    Choreography — Post local transaction(which is actually some DB transaction with a flag to denote it is still to be fully committed,
    first participating service publishes an event to next service in the workflow which again executes a local transaction — post transaction,
    the second service either returns a success or error code based on failure of some business rules, based on the returned event , the first service either change the initial local transaction as final approved transaction or deletes(invalidates) initial transaction. There can be multiple services in a business flow. It gives a scope of enhanced scalability but at the expense of simplicity(which makes this implementation complex). It requires some additional resources such as Message broker etc.

    Orchestration — Instead of local transactions interacting with each other directly with events , in case of orchestration ,
    there is an Orchestrator object which co-ordinates between these local transactions and it is responsible for compensating/reversing all the
    previous local transactions if one of the transactions fail. It somewhere has somewhere tight coupling wrapped within implementation along with
    single point of failure. It doesn’t need other additional resources .

2. What is Command Query Response Segregation Pattern in Microservices and when do we use it?
    After adopting Microservices architecture ,having applied database per service, when we try to get join data from multiple services, it becomes very complicated . There could be multiple options to service such requests. One of this is Command Query Response Segregation Pattern where we create a new view database , which is a read-only replica that is designed to support that query.
    This database is updated on the domain events published by the individual services. For details, please refer :

3. What is the difference between cohesion and coupling ?
  Cohesion refers to association and relationship within a module, highly cohesive means the component of module are tightly couple , changing one needs a change in other .
  This can be considered as one the factors while designing microservices. Something which changes together should be packaged together.

  Coupling refers to association and relationship of one module with another. Usually a loosely coupled relationship is preferred for
  separate module so that those could change independently without impacting other.

4. What are the key benefits of using microservices?
        Independent deployment and scaling
        Fault isolation (one service failure doesn't crash the entire system)
        Better team autonomy
        Easy technology adoption (different services can use different stacks)

5. What are the main challenges of microservices?
      Complex testing and debugging
      Distributed system complexities (latency, network issues)
      Increased deployment and monitoring effort
      Data consistency issues

6. What is Domain-Driven Design (DDD), and why is it important for
    microservices? DDD focuses on modeling software based on business domains. It helps microservices
    because it ensures services are aligned with business logic, reducing coupling and improving maintainability

7. What is a service registry in microservices?
    A service registry is a database where microservices register themselves and discover other services. Examples: Eureka, Consul, Zookeeper.

8. What is API Gateway, and why is it important in microservices?
    Gateway is an entry point that handles requests, routes them to the appropriate microservice, and manages cross-cutting concerns like authentication,
    rate-limiting, and logging.

9. What is eventual consistency in microservices, and how is it achieved?
    Eventual consistency means that all services in a distributed system will eventually have consistent data, even if they're temporarily out of sync.
    It's achieved using techniques like event sourcing, message queues, and replication.

10. What is Circuit Breaker Pattern in microservices?
    The circuit breaker pattern is used to prevent cascading failures in microservices. If a service is failing repeatedly,
    the circuit breaker trips and stops requests to that service until it recovers. Tools like Hystrix implement this.

11. How do you handle database design in microservices?
    Each microservice should ideally have its own database (database per service pattern) to ensure loose coupling. Shared databases are discouraged.

12. How do you manage distributed transactions in microservices?
        Using SAGA Pattern (orchestration or choreography-based).
        Leveraging event-driven architectures.

13. How do you monitor and log microservices?
    monitoring tools like:

        ELK Stack (Elasticsearch, Logstash, Kibana)
        Prometheus + Grafana
        Jaeger or Zipkin for distributed tracing.

14. What is Kubernetes, and why is it important for microservices?
    Kubernetes automates deployment, scaling, and management of containerized applications. It's essential for microservices as it simplifies orchestration in distributed systems.

15. What are sidecars, and how are they used in microservices?
    Sidecars are helper containers that run alongside a service to handle cross-cutting concerns like monitoring, logging, or service communication. Example: Envoy in a service mesh.

16. What is a Service Mesh, and how does it improve microservices architecture?
    A Service Mesh (e.g., Istio, Linkerd) manages service-to-service communication, security, and observability in a microservices environment without changing the application code.

17. How do you secure microservices?
        Use OAuth2 and OpenID Connect for authentication.
        Secure communication using TLS/SSL.
        Validate and sanitize inputs to prevent injection attacks.
        Use API gateways for security.
18.