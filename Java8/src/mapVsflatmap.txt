The Basics: What Are map() and flatMap()?
        map() is used to transform each element in the stream by applying a function. It works on a one-to-one mapping of data,
            meaning it takes one input and produces one output.
        flatMap() is more powerful when you need to flatten or merge multiple layers of data structures (like nested collections) into a single layer.
            It transforms each element and then "flattens" the results into a single stream.

       When to Use map()?
        Let's start with a simple example using map(). Suppose you have a list of names and you want to convert each name to uppercase.
        List<String> names = Arrays.asList("Alice", "Bob", "Charlie");
        List<String> upperCaseNames = names.stream()
                                           .map(String::toUpperCase)
                                           .collect(Collectors.toList());

        List<String> names = Arrays.asList("Alice", "Bob", "Charlie");
        List<String> upperCaseNames = names.stream()
                                           .map(String::toUpperCase)
                                           .collect(Collectors.toList());

     When to Use flatMap()?
        List<List<String>> listOfWords = Arrays.asList(
            Arrays.asList("Hello", "World"),
            Arrays.asList("Java", "Streams"),
            Arrays.asList("FlatMap", "Example")
        );
        List<String> flatList = listOfWords.stream()
                                           .flatMap(List::stream)
                                           .collect(Collectors.toList());

        Visualizing map() vs flatMap()

            map() is like creating individual packages from a list of items: each package contains one item.
            flatMap() is like opening those packages and combining all the items into a single big package.

     Practical Scenarios
         Use map() when:
         You need to apply a transformation to each element.
         You have a single-level data structure and want to modify it, such as converting integers to their square or strings to uppercase.
         Use flatMap() when:
         You have nested data structures (like a list of lists or a stream of streams) and need to flatten them.
         You're dealing with situations where each element may generate multiple elements in the output, such as expanding a list of collections into a flat list.


