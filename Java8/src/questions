1. What Happens If You Override a Private Method?
Question:
Can we override a private method in Java?
Explanation:

No, private methods cannot be overridden because they are not visible to subclasses. However,
 if you define a method with the same name in a subclass, it is considered method hiding, not overriding.
-----
2. Can You Catch an Exception Thrown in a Static Block?
 Exceptions thrown in a static block can only be caught within a static initializer block using a try-catch. Otherwise,
 the program will fail to load the class.
----
3. Class Loader :
    A class loader is a tool that Java uses to load different classes (pieces of code) into the memory of your computer when a Java program is running. It’s like a librarian who helps the computer to find and “read” the right books (classes) that the program needs to use.

    There are three built-in class loaders in Java

        Bootstrap class loader: this is the first class loader that starts working when you run a Java program.
        It loads the most basic classes that Java needs to run, such as classes for working with numbers or strings.
        These classes are located in the <JAVA_HOME>/lib directory.

        Extension class loader: this class loader loads additional classes that extend the functionality of Java,
         such as classes for working with databases or XML files. These classes are located in the <JAVA_HOME>/lib/ext directory.

        System class loader: Also know as application class loader. This class loader loads classes from the classpath
        specified by the CLASSPATH environment variable or the -classpath command-line option. It loads classes that you or other
        developers have created for your program.

----
3. Interface VS Abstract class:
    Abstract class :
         Cannot be instantiated: You cannot create an object of an abstract class directly.
         Abstract methods: It can have abstract methods, which must be implemented by any subclass.
         Concrete methods: It can also contain fully implemented methods, giving subclasses some default behavior.
         Single inheritance: Like any other class, an abstract class can be extended by only one subclass at a time.

     abstract class Animal {
         abstract void sound();  // Abstract method

         public void eat() {     // Concrete method
             System.out.println("This animal is eating.");
         }
     }

     class Dog extends Animal {
         @Override
         void sound() {
             System.out.println("The dog barks.");
         }
     }

   Interface :
    An interface in Java is like a contract for classes. It is a completely abstract class, meaning all of its methods are abstract (until Java 8, when default and static methods were introduced). Interfaces are used to specify behaviors that a class must implement, but they don’t provide any concrete behavior themselves.
    Key Features of Interfaces:

        All methods are abstract by default.
        A class can implement multiple interfaces, which provides a workaround for Java’s lack of multiple inheritance.
        Interfaces do not have instance variables, though they can have static final constants.

    interface Flyable {
        void fly();  // Abstract method
    }

    interface Swimmable {
        void swim(); // Abstract method
    }

    class Duck implements Flyable, Swimmable {
        @Override
        public void fly() {
            System.out.println("The duck flies.");
        }

        @Override
        public void swim() {
            System.out.println("The duck swims.");
        }
    }

4.  Multiple Inheritance in Java and How It Is Achieved via Interfaces

   Java doesn’t support multiple inheritance (a class cannot extend more than one class). This restriction exists to avoid the “diamond problem”, which arises when a class inherits from two classes that both provide different implementations of the same method. This could create ambiguity about which method to use.

   However, Java provides a solution to this problem through interfaces. Since a class can implement multiple interfaces, Java developers can achieve the functionality of multiple inheritance without its complications.
   Why Multiple Inheritance Is Not Allowed in Java:

       Ambiguity: Multiple inheritance can lead to ambiguity when two or more parent classes have methods with the same signature.
       Complexity: The code becomes harder to maintain and debug.
       Diamond Problem: In languages that support multiple inheritance (like C++), the “diamond problem” can occur, leading to confusion over which inherited method to execute.

   Achieving Multiple Inheritance with Interfaces:

   Since interfaces provide no method implementations (before Java 8), there’s no risk of conflicting method implementations, allowing a class to implement as many interfaces as it needs.

   interface Printable {
       void print();
   }

   interface Showable {
       void show();
   }

   class Document implements Printable, Showable {
       @Override
       public void print() {
           System.out.println("Printing document.");
       }

       @Override
       public void show() {
           System.out.println("Showing document.");
       }
   }

   Here, Document implements both Printable and Showable interfaces, thereby achieving multiple inheritance behavior without ambiguity.

5.  Why Isn’t My HashMap Key Being Found?
        import java.util.HashMap;
        import java.util.Objects;
        class Key {
            private String id;
            public Key(String id) {
                    this.id = id;
                }
            @Override
            public boolean equals(Object o) {
                if (this == o) return true;
                if (o == null || getClass() != o.getClass()) return false;
                Key key = (Key) o;
                return Objects.equals(id, key.id);
            }
        }
        public class HashMapDemo {
            public static void main(String[] args) {
                HashMap<Key, String> map = new HashMap<>();
                map.put(new Key("1"), "Value1");
                System.out.println(map.get(new Key("1")));
            }
        }

            Will it print “Value1”?
            If not, why?
            How would you fix it?

           Will it print “Value1”? No, it will print null.
           Why? While the equals method is correctly overridden, the hashCode method is not. In HashMap, keys are stored in buckets based on their hash codes. Without a proper hashCode implementation, the new Key("1") does not map to the same bucket as the original key.
           How to fix it? Add a proper hashCode implementation:

       @Override public int hashCode() {
           return Objects.hash(id);
       }

6. How to resolve issues with reflection and cloning in Singleton?
    Prevent Reflection: Reflection can be used to call the private constructor of a singleton class and create multiple instances.
    To prevent this, you can modify the constructor to throw an exception if an instance already exists.
    public class Singleton {
          private static Singleton instance;
          private Singleton() {
                   if (instance != null) {
                    throw new IllegalStateException("Instance already created!");
                    }
          }
    public static Singleton getInstance() {
        if (instance == null) {
            instance = new Singleton();
        }
            return instance;
        }
    }

    Prevent Cloning: The clone() method can also break the Singleton pattern by allowing an object to be cloned, effectively creating multiple instances.
    To avoid this, you need to override the clone() method and throw a CloneNotSupportedException.

    @Override
    protected Object clone() throws CloneNotSupportedException {
    throw new CloneNotSupportedException();
    }


7. How would you implement logging in Java using Decorators?
    The Decorator Pattern allows you to dynamically add behavior to an object without modifying its code. This is useful for adding logging functionality to existing classes.

    Here's how you could implement logging using the Decorator Pattern:
    interface Processor {
        void process(String data);
        }
        class SimpleProcessor implements Processor {
        @Override
        public void process(String data) {
            System.out.println("Processing: " + data);
            }
        }
    class LoggingDecorator implements Processor {
           private final Processor wrapped;
            public LoggingDecorator(Processor p) {
                this.wrapped = p;
            }
        @Override
        public void process(String data) {
            System.out.println("Logging before processing: " + data);
            wrapped.process(data);
            System.out.println("Logging after processing: " + data);
        }
    }

8. Custom Class Loaders for Modular Applications
    ClassLoader customLoader = new URLClassLoader(new URL[]{new URL("file:/path/to/classes/")});
    Class<?> clazz = customLoader.loadClass("com.example.MyClass");

    Why use it? Allows on-the-fly updates to your application without restarting.
----
9. Use Reflection for Dynamic Behavior.
    Reflection enables runtime inspection and modification of code.
    Method method = obj.getClass().getDeclaredMethod("methodName");
    method.setAccessible(true);
    method.invoke(obj);

    Why use it? Ideal for building frameworks and libraries. Use sparingly to avoid performance hits.
---
10. Embrace Optional for Safer Code
    Say goodbye to NullPointerException by using Optional.

    Optional<String> name = Optional.ofNullable(user.getName());
    name.ifPresent(System.out::println);

    Why use it? Encourages thoughtful handling of missing or null values.
-----
11. Try-With-Resources for Cleaner Code
    Automatically manage resources like files or sockets with this Java feature.

    try (BufferedReader reader = new BufferedReader(new FileReader("file.txt"))) {
        System.out.println(reader.readLine());
    }

    Why use it? Prevents resource leaks and simplifies error handling.
-----
12. Asynchronous Programming with CompletableFuture
    Write non-blocking code using CompletableFuture for responsive applications.

    CompletableFuture.supplyAsync(() -> "Hello")
                     .thenApply(String::toUpperCase)
                     .thenAccept(System.out::println);


